{"version":3,"sources":["Header.js","Footer.js","Offices.js","reportWebVitals.js","index.js","Header.module.css"],"names":["Header","props","changeName","setState","companyName","state","className","styles","this","onClick","React","Component","Footer","style","backgroundColor","color","year","Offices","getOneOffice","document","getElementById","innerHTML","fetch","value","method","then","res","json","response","offices","console","log","offices_index","msg","offices_data","officecode","addressline1","addressline2","city","country","postalcode","phone","territory","error","clearForm","delete","message","saveOffice","flag","i","offices_count","updateOffice","addOffice","isLoaded","ok","json_response","length","userData","headers","redirect","referrerPolicy","body","JSON","stringify","id","onChange","type","name","min","step","max","placeholder","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Page","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.3c50a490.chunk.js","sourcesContent":["import React from 'react'\nimport styles from './Header.module.css';\nclass Header extends React.Component{\n    constructor(props)\n    {\n        super(props)\n        this.state = {companyName : this.props.companyName}\n    }\n\n    changeName =()=>\n    {\n        this.setState({companyName:\"toto.com\"})\n    }\n    render(){\n        return(\n            <header className={styles.Header}>\n                Welcome to {this.state.companyName}\n                <button onClick={()=>this.changeName()}>Change name</button>\n            </header>\n            )\n    }\n}\nexport default Header","import React from 'react'\nclass Footer extends React.Component{\n    constructor(props)\n    {\n        super(props)\n    }\n    render(){\n        return <footer style = {{backgroundColor:\"black\",color:\"white\"}}>@Copyright {this.props.year}</footer>\n    }\n}\nexport default Footer","import React from 'react';\n\n/**\n* Dresses components\n* uses our dress server REST API http://localhost:3001/offices\n* props inputs: none\n*/\nclass Offices extends React.Component {\n    constructor(props) {\n      super(props);\n\n      // set initial state\n      // do not use setState in constructor, write state directly\n      this.state = {\n        offices_data : [], // will contain offices data array from server\n        offices_index : 0, // the index of the office currently shown, start at first in array\n        offices_count : 0, // how many offices in data array from server\n        isLoaded : false,  // will be true after data have been received from server\n        error : null       // no errors yet !\n      };\n    }\n\n    // REACT component lifecycle for componentDidMount\n    // https://www.w3schools.com/react/react_lifecycle.asp\n    componentDidMount() {\n\n       // AJAX call using fetch. Make sure the dress server is running !\n       // see https://reactjs.org/docs/faq-ajax.html\n      fetch('http://localhost:8000/offices')\n        .then(\n            (response)=> {\n                // here full fetch response object\n                //console.log(response)\n                // fetch not like jQuery ! both ok code 200 and error code 404 will execute this .then code\n                if (response.ok) {\n                    // handle 2xx code success only\n                    // get only JSON data returned from server with .json()\n                    response.json().then(json_response => {\n                        console.log(json_response)\n                        this.setState({\n                            offices_data:json_response.offices, // data received from server\n                            offices_count:json_response.offices.length, // how many offices in array\n                            offices_index:0,  // will first show the first dress in the array\n                            isLoaded : true,  // we got data\n                            error : null // no errors\n                        })\n                    }\n                    )\n\n                }else{\n                    // handle errors, for example 404\n                    response.json().then(json_response => {\n                        this.setState({\n                            isLoaded: false,\n                            // result returned is case of error is like  {message: \"office not found\"}\n                            // save the error in state for display below\n                            error:json_response,   // something in format  {message: \"office not found\", db_data:{}}\n                            offices_data: {}, // no data received from server\n                            offices_count:0,\n                            offices_index:0,\n                        });\n                    })\n                }\n            },\n\n            (error) => {\n                // Basically fetch() will only reject a promise if the URL is wrong, the user is offline,\n                // or some unlikely networking error occurs, such a DNS lookup failure.\n                this.setState({\n                    isLoaded: false,\n                    error: {message:\"AJAX error, URL wrong or unreachable, see console\"}, // save the AJAX error in state for display below\n                    offices_data: {}, // no data received from server\n                    offices_count:0,\n                    offices_index:0,\n                });\n            }\n        )\n    }\n    getOneOffice =()=>\n    {\n        document.getElementById(\"status\").innerHTML = \"Waiting for server\"\n        fetch(\"http://localhost:8000/offices/\" + document.getElementById('oldofficecode').value,\n            {\n                method: 'GET',\n            }\n        )\n            .then(res => res.json())//here server sends JSON response\n            .then(\n                (response) => {\n                    // TO DO how to handle code other than 200 because this gets\n                    // executed in all cases\n                    let offices = response.offices;\n                    console.log(offices)\n                    this.setState({offices_index:document.getElementById('oldofficecode').value - 1})\n                    document.getElementById(\"status\").innerHTML = response.msg\n                    document.getElementById('officecode').value = this.state.offices_data[this.state.offices_index].officecode\n                    document.getElementById('addressline1').value = this.state.offices_data[this.state.offices_index].addressline1\n                    document.getElementById('addressline2').value = this.state.offices_data[this.state.offices_index].addressline2\n                    document.getElementById('city').value = this.state.offices_data[this.state.offices_index].city\n                    document.getElementById('state').value = this.state.offices_data[this.state.offices_index].state\n                    document.getElementById('country').value = this.state.offices_data[this.state.offices_index].country\n                    document.getElementById('postalcode').value = this.state.offices_data[this.state.offices_index].postalcode\n                    document.getElementById('phone').value = this.state.offices_data[this.state.offices_index].phone\n                    document.getElementById('territory').value = this.state.offices_data[this.state.offices_index].territory\n                },\n                (error) => {\n                // only NO RESPONSE URL errors will trigger this code\n                    document.getElementById(\"status\").innerHTML = \"AJAX error: URL wrong or unreachable, see console\"\n                }\n            )\n    }\n    // previous =()=>\n    // {\n    //     if(this.state.offices_index > 0)\n    //     {\n    //         this.setState({offices_index:this.state.offices_index-1})\n    //         console.log(this.state.offices_index)\n    //         // document.getElementById('oldofficecode').value = this.state.offices_data[this.state.offices_index].officecode\n    //         document.getElementById('officecode').value = this.state.offices_data[this.state.offices_index].officecode\n    //         document.getElementById('addressline1').value = this.state.offices_data[this.state.offices_index].addressline1\n    //         document.getElementById('addressline2').value = this.state.offices_data[this.state.offices_index].addressline2\n    //         document.getElementById('city').value = this.state.offices_data[this.state.offices_index].city\n    //         document.getElementById('state').value = this.state.offices_data[this.state.offices_index].state\n    //         document.getElementById('country').value = this.state.offices_data[this.state.offices_index].country\n    //         document.getElementById('postalcode').value = this.state.offices_data[this.state.offices_index].postalcode\n    //         document.getElementById('phone').value = this.state.offices_data[this.state.offices_index].phone\n    //         document.getElementById('territory').value = this.state.offices_data[this.state.offices_index].territory\n    //     }\n    //     else{\n    //         document.getElementById('previous').disable = true\n    //     }\n    // }\n    // next =()=>\n    // {\n    //     if((this.state.offices_index+1) < this.state.offices_count)\n    //     {\n    //         this.setState({offices_index:this.state.offices_index+1})\n    //         console.log(this.state.offices_index)\n    //         // document.getElementById('oldofficecode').value = this.state.offices_data[this.state.offices_index].officecode\n    //         document.getElementById('officecode').value = this.state.offices_data[this.state.offices_index].officecode\n    //         document.getElementById('addressline1').value = this.state.offices_data[this.state.offices_index].addressline1\n    //         document.getElementById('addressline2').value = this.state.offices_data[this.state.offices_index].addressline2\n    //         document.getElementById('city').value = this.state.offices_data[this.state.offices_index].city\n    //         document.getElementById('state').value = this.state.offices_data[this.state.offices_index].state\n    //         document.getElementById('country').value = this.state.offices_data[this.state.offices_index].country\n    //         document.getElementById('postalcode').value = this.state.offices_data[this.state.offices_index].postalcode\n    //         document.getElementById('phone').value = this.state.offices_data[this.state.offices_index].phone\n    //         document.getElementById('territory').value = this.state.offices_data[this.state.offices_index].territory\n    //     }\n    //     else{\n    //         document.getElementById('next').disable = true\n    //     }\n    // }\n    clearForm =()=>\n    {\n        document.getElementById('oldofficecode').value = \"\"\n        document.getElementById('officecode').value = \"\"\n        document.getElementById('addressline1').value = \"\"\n        document.getElementById('addressline2').value = \"\"\n        document.getElementById('city').value = \"\"\n        document.getElementById('state').value = \"\"\n        document.getElementById('country').value = \"\"\n        document.getElementById('postalcode').value = \"\"\n        document.getElementById('phone').value = \"\"\n        document.getElementById('territory').value = \"\"\n    }\n    delete =()=>\n    {\n        fetch(\"http://localhost:8000/offices/\" + document.getElementById('officecode').value,\n            {\n                method: 'DELETE'\n                //,body: JSON.stringify(someData)// data to send in the body of the request\n            })\n        .then(res => res.json())//here server sends JSON response\n        .then(\n            (response) => {\n                // TO DO how to handle code other than 200 because this gets\n                // exeucted in all cases\n                this.clearForm()\n                this.setState({error:{message:\"Deleted\"}})\n               // document.getElementById(\"status\").innerHTML = response.msg\n                },\n\n                (error) => {\n                    // only NO RESPONSE URL errors will trigger this code\n                    this.setState({error:{message:\"AJAX error: URL wrong or unreachable, see console\"}})\n                    //document.getElementById(\"status\").innerHTML = \"AJAX error: URL wrong or unreachable, see console\"\n                }\n\n            )\n    }\n\n    saveOffice =()=> {\n        let flag = false\n        for(let i = 0;i<this.state.offices_count;i++)\n        {\n            if(document.getElementById('officecode').value === this.state.offices_data[i].officecode)\n            {\n                flag = true\n            }\n        }\n        console.log(flag)\n        if (flag) {\n            this.updateOffice()\n        } else {\n            this.addOffice()\n        }\n    }\n\n    updateOffice() {\n        document.getElementById(\"status\").innerHTML = \"Waiting for server\"\n\n\n        let userData = {\n            officecode: document.getElementById('officecode').value,\n            addressline1: document.getElementById('addressline1').value,\n            addressline2: document.getElementById('addressline2').value,\n            city: document.getElementById('city').value,\n            state: document.getElementById('state').value,\n            country: document.getElementById('country').value,\n            postalcode: document.getElementById('postalcode').value,\n            phone: document.getElementById('phone').value,\n            territory: document.getElementById('territory').value\n        }\n\n        fetch(\"http://localhost:8000/offices/\" + document.getElementById('officecode').value,\n            {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                    //'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                redirect: 'follow', // manual, *follow, error\n                referrerPolicy: 'no-referrer', // no-referrer, *client\n                body: JSON.stringify(userData)\n            }\n        )\n            .then(res => res.json())//here server sends JSON response\n            .then(\n                (response) => {\n                    // TO DO how to handle code other than 200 because this gets\n                    // exeucted in all cases\n                    this.setState({error:{message:\"Updated\"}})\n                },\n\n                (error) => {\n                    // only NO RESPONSE URL errors will trigger this code\n                    this.setState({error:{message:\"AJAX error: URL wrong or unreachable, see console\" }})\n                }\n\n            )\n\n    }//end of UpdateOffice function\n\n    addOffice() {\n        document.getElementById(\"status\").innerHTML = \"Waiting for server\"\n\n        let userData = {\n            officecode: document.getElementById('officecode').value,\n            addressline1: document.getElementById('addressline1').value,\n            addressline2: document.getElementById('addressline2').value,\n            city: document.getElementById('city').value,\n            state: document.getElementById('state').value,\n            country: document.getElementById('country').value,\n            postalcode: document.getElementById('postalcode').value,\n            phone: document.getElementById('phone').value,\n            territory: document.getElementById('territory').value\n        }\n\n        fetch(\"http://localhost:8000/offices/\" ,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                    //'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                redirect: 'follow', // manual, *follow, error\n                referrerPolicy: 'no-referrer', // no-referrer, *client\n                body: JSON.stringify(userData)\n            }\n        )\n            .then(res => res.json())//here server sends JSON response\n            .then(\n                (response) => {\n                    // TO DO how to handle code other than 200 because this gets\n                    // exeucted in all cases\n                    document.getElementById(\"status\").innerHTML = response.msg\n                },\n\n                (error) => {\n                    // only NO RESPONSE URL errors will trigger this code\n                    document.getElementById(\"status\").innerHTML = \"AJAX error: URL wrong or unreachable, see console\"\n                }\n\n            )\n\n    }\n\n    // display the offices table\n    render() {\n        if(this.state.error){\n            return <div><b>{this.state.error.message}</b></div>;\n        }else if(this.state.isLoaded){\n            if(this.state.offices_count!==0){\n                // office results not null\n                return (\n                    <div>\n                        <b>List of offices from server localhost:8000/offices</b><br/>\n                        Server message: <b><span id=\"status\">Waiting user action</span></b><br></br>\n                        Select the office code to be updated : <input onChange={()=>this.getOneOffice()} type=\"number\" name=\"officecode\" id=\"oldofficecode\" min={1} step={1} max={this.state.offices_count} placeholder=\"Select office\"/>\n                        <form id=\"officeform\">\n                            <label>officecode</label> <input type=\"number\" name=\"officecode\" id=\"officecode\" /><br/><br/>\n                            <label>Address Line 1</label> <input type=\"text\" name=\"addressline1\" id=\"addressline1\"/><br/><br/>\n                            <label>Address Line 2</label> <input type=\"text\" name=\"addressline2\" id=\"addressline2\"/><br/><br/>\n                            <label>city</label> <input type=\"text\" name=\"city\" id=\"city\"/><br/><br/>\n                            <label>state</label> <input type=\"text\" name=\"state\" id=\"state\"/><br/><br/>\n                            <label>country</label> <input type=\"text\" name=\"country\" id=\"country\"/><br/><br/>\n                            <label>postal code</label> <input type=\"text\" name=\"postalcode\" id=\"postalcode\"/><br/><br/>\n                            <label>phone</label> <input type=\"text\" name=\"phone\" id=\"phone\"/><br/><br/>\n                            <label>territory</label> <input type=\"text\" name=\"territory\" id=\"territory\"/><br/><br/>\n\n                        {/* <button type=\"button\" id=\"previous\" onClick={()=>this.previous()}>Previous</button>\n                        <button type=\"button\" id=\"next\" onClick={()=>this.next()}>Next</button> */}\n                        <button type=\"button\"  onClick={()=>this.delete()}>Delete</button>\n                        <button type=\"button\"  onClick={()=>this.clearForm()}>Clear Form</button>\n                        <button type=\"button\" onClick={()=>this.saveOffice()}>Update/Add</button>\n                        </form>\n                    </div>\n                )\n            }else{\n                return(<div><b>Office table is empty</b></div>)\n            }\n        }else{\n            return (<div><b>Waiting for server ...</b></div>)\n        }\n    }\n  }\n\nexport default Offices;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Header from './Header.js'\nimport Footer from './Footer.js'\n// import SelectList from './SelectList.js'\nimport Offices from './Offices.js'\nimport reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n\n// const provinces=[ {code:'QC',name:'Quebec'},{code:'ON',name:'Ontario'},{code:'NB',name:'New-Brunswick'}]\n\n// const countries=[{code:'CA',name:'Canada'},{code:'US',name:'USA'},{code:'IN',name:'India'},{code:'MX',name:'Mexixo'}]\n\nclass Page extends React.Component{\n    render(){\n        return (\n            <div>\n            <Header companyName=\"blabla.com\"/>\n            {/* <SelectList list={provinces}/>\n            <SelectList list={countries}/> */}\n            <Offices/>\n            <Footer year=\"2019 + 1\"/>\n            </div>\n        )\n    }\n}\nReactDOM.render(\n    <Page/>,\n    document.getElementById('root')\n  );\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__2-_Fy\"};"],"sourceRoot":""}
{"version":3,"sources":["Header.js","Footer.js","Track.js","NewTrack.js","Discogs.js","Playlist.js","reportWebVitals.js","index.js","Header.module.css"],"names":["Header","props","changeName","setState","companyName","state","className","styles","React","Component","Footer","style","backgroundColor","color","this","year","track","id","playlistid","title","uri","masterid","onClick","delete","newtrack","src","cover","alt","href","add","Discogs","getTracks","fetch","document","getElementById","value","method","then","res","json","discogs_data","results","discogs_count","length","isLoaded","innerHTML","error","addTrack","Object","assign","filter","discog_item","console","log","master_id","playlist","i","userData","headers","redirect","referrerPolicy","body","JSON","stringify","msg","discogs_index","type","name","map","album","NewTrack","thumb","bind","info","Playlist","deleteTrack","response","message","tracks_data","tracks_index","tracks_count","ok","json_response","tracks","class","Track","playlist_id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Page","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.c55657fb.chunk.js","sourcesContent":["import React from 'react'\nimport styles from './Header.module.css';\nclass Header extends React.Component{\n    constructor(props)\n    {\n        super(props)\n        this.state = {companyName : this.props.companyName}\n    }\n\n    changeName =()=>\n    {\n        this.setState({companyName:\"toto.com\"})\n    }\n    render(){\n        return(\n            <header className={styles.Header}>\n               <h1>Music Playlist</h1>\n            </header>\n            )\n    }\n}\nexport default Header","import React from 'react'\nclass Footer extends React.Component{\n    constructor(props)\n    {\n        super(props)\n    }\n    render(){\n        return <footer style = {{backgroundColor:\"black\",color:\"white\"}}>@Copyright {this.props.year}</footer>\n    }\n}\nexport default Footer","import React from 'react';\n\nconst track = (props) => {\n    return(<tr>\n        <td>{props.id}</td>\n         <td>{props.playlistid}</td>\n         <td>{props.title}</td>\n         <td>{props.uri}</td>\n         <td>{props.masterid}</td>\n         <td><button onClick={props.delete}>Delete</button></td>\n    </tr>)\n}\n\nexport default track;","import React from 'react';\n\nconst newtrack = (props) => {\n    return(<tr>\n        <td>{props.id}</td>\n         <td>{props.title}</td>\n         <td><img src = {props.cover} alt=\"cover\"/></td>\n         <td>{props.style}</td>\n         <td><a href={\"http://www.discogs.com/\" + props.uri}>More Information</a></td>\n         <td><button onClick={props.add}>Add</button></td>\n    </tr>)\n}\n\nexport default newtrack;","import React from 'react';\nimport NewTrack from './NewTrack'\nclass Discogs extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            discogs_data : [],\n            discogs_index : 0,\n            discogs_count : 0,\n            isLoaded : false,  // will be true after data have been received from server\n            error : null       // no errors yet !\n          };\n    }\n    getTracks=()=>\n    {\n        fetch(\"https://api.discogs.com/database/search?key=hpWaohBENEGVybtdZsXR&secret=dzqvkpHSQRnkQVbFYtUsZsfgUashxNQe&artist=\"+document.getElementById('filter').value+\"&country=canada\",\n            {\n                method: 'GET',\n            }\n        )\n            .then(res => res.json())//here server sends JSON response\n            .then(\n                (res) => {\n                    this.setState({discogs_data:res.results,\n                    discogs_count : res.results.length,\n                    isLoaded:true})\n\n                        document.getElementById(\"status\").innerHTML = \"Results\"\n                    },\n                    (error) => {\n                        // only NO RESPONSE URL errors will trigger this code\n                        document.getElementById(\"status\").innerHTML = \"AJAX error: URL wrong or unreachable, see console\"\n                    }\n                )\n        }\n        addTrack =(id)=>\n        {\n            const track = Object.assign([], this.state.discogs_data.filter(discog_item => discog_item.id === id))\n            console.log(track[0].master_id)\n            let playlist = 0\n            for(let i = 0; i < track[0].style.length; i++)\n            {\n                if(track[0].style[i] === \"Acoustic\")\n                {\n                    playlist = 2\n                }\n                else if(track[0].style[i] === \"Classic\")\n                {\n                    playlist = 3\n                }\n                else if(track[0].style[i] === \"Country\")\n                {\n                    playlist = 4\n                }\n                else if(track[0].style[i] === \"Metal\")\n                {\n                    playlist = 5\n                }\n                else if(track[0].style[i] === \"Pop Rock\")\n                {\n                    playlist = 6\n                }\n                else if(track[0].style[i] === \"Rock\")\n                {\n                    playlist = 7\n                }\n                else\n                {\n                    playlist = 1\n                }\n            }\n            let userData = {\n                id: track[0].id,\n                playlistid: playlist,\n                title: track[0].title,\n                uri: track[0].uri,\n                masterid: track[0].master_id\n            }\n\n        fetch(\"http://localhost:8000/tracks\" ,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                    //'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                redirect: 'follow', // manual, *follow, error\n                referrerPolicy: 'no-referrer', // no-referrer, *client\n                body: JSON.stringify(userData)\n            }\n        )\n            .then(res => res.json())//here server sends JSON response\n            .then(\n                (res) => {\n                    // TO DO how to handle code other than 200 because this gets\n                    // exeucted in all cases\n                    document.getElementById(\"status\").innerHTML = res.msg\n                },\n\n                (error) => {\n                    // only NO RESPONSE URL errors will trigger this code\n                    document.getElementById(\"status\").innerHTML = \"AJAX error: URL wrong or unreachable, see console\"\n                }\n\n            )\n        }\n    render() {\n                return (\n                    <div>\n                        <input type=\"text\" name=\"filter\" id=\"filter\"/>\n                        <button type=\"button\" onClick={()=>this.getTracks()}>Search</button>\n                        <table>\n                            <thead>\n                                <th>ID</th>\n                                <th>Title</th>\n                                <th>Cover</th>\n                                <th>Genre</th>\n                                <th>Details</th>\n                                <th>Add</th>\n                            </thead>\n                            <tbody>\n                            {\n                                this.state.discogs_data.map((album)=>{\n                                    return(<NewTrack\n                                    id={album.id}\n                                    key={album.id}\n                                    title = {album.title}\n                                    cover = {album.thumb}\n                                    style={album.style}\n                                    add={this.addTrack.bind(this, album.id)}\n                                    info={album.uri}\n                                    ></NewTrack>)\n                                })\n                            }\n                            </tbody>\n                        </table>\n                    </div>\n                )\n    }\n}\nexport default Discogs;","import React from 'react';\nimport Track from './Track'\nimport Discogs from './Discogs'\n\n/**\n* Playlist components\n* uses track server REST API\n* props inputs: none\n*/\nclass Playlist extends React.Component {\n    constructor(props) {\n      super(props);\n\n      // set initial state\n      // do not use setState in constructor, write state directly\n      this.state = {\n        tracks_data : [], // will contain tracks data array from server\n        tracks_index : 0, // the index of the track currently shown, start at first in array\n        tracks_count : 0, // how many tracks in data array from server\n        isLoaded : false,  // will be true after data have been received from server\n        error : null       // no errors yet !\n      };\n    }\n\n    // REACT component lifecycle for componentDidMount\n    // https://www.w3schools.com/react/react_lifecycle.asp\n    componentDidMount() {\n\n       // AJAX call using fetch. Make sure the track server is running !\n       // see https://reactjs.org/docs/faq-ajax.html\n      fetch('http://localhost:8000/tracks')\n        .then(\n            (response)=> {\n                // here full fetch response object\n                //console.log(response)\n                // fetch not like jQuery ! both ok code 200 and error code 404 will execute this .then code\n                if (response.ok) {\n                    // handle 2xx code success only\n                    // get only JSON data returned from server with .json()\n                    response.json().then(json_response => {\n                        console.log(json_response)\n                        this.setState({\n                            tracks_data:json_response.tracks, // data received from server\n                            tracks_count:json_response.tracks.length, // how many tracks in array\n                            tracks_index:0,  // will first show the first track in the array\n                            isLoaded : true,  // we got data\n                            error : null // no errors\n                        })\n                    }\n                    )\n\n                }else{\n                    // handle errors, for example 404\n                    response.json().then(json_response => {\n                        this.setState({\n                            isLoaded: false,\n                            // result returned is case of error is like  {message: \"track not found\"}\n                            // save the error in state for display below\n                            error:json_response,   // something in format  {message: \"track not found\", db_data:{}}\n                            tracks_data: {}, // no data received from server\n                            tracks_count:0,\n                            tracks_index:0,\n                        });\n                    })\n                }\n            },\n\n            (error) => {\n                // Basically fetch() will only reject a promise if the URL is wrong, the user is offline,\n                // or some unlikely networking error occurs, such a DNS lookup failure.\n                this.setState({\n                    isLoaded: false,\n                    error: {message:\"AJAX error, URL wrong or unreachable, see console\"}, // save the AJAX error in state for display below\n                    tracks_data: {}, // no data received from server\n                    tracks_count:0,\n                    tracks_index:0,\n                });\n            }\n        )\n    }\n\n    deleteTrack =(id)=>\n    {\n        fetch(\"http://localhost:8000/tracks/\" + id,\n            {\n                method: 'DELETE'\n                //,body: JSON.stringify(someData)// data to send in the body of the request\n            })\n        .then(res => res.json())//here server sends JSON response\n        .then(\n            (response) => {\n                // TO DO how to handle code other than 200 because this gets\n                // exeucted in all cases\n                this.setState({error:{message:\"Deleted\"}})\n                document.getElementById(\"status\").innerHTML = \"Track Deleted\"\n                },\n\n                (error) => {\n                    // only NO RESPONSE URL errors will trigger this code\n                    this.setState({error:{message:\"AJAX error: URL wrong or unreachable, see console\"}})\n                    document.getElementById(\"status\").innerHTML = \"AJAX error: URL wrong or unreachable, see console\"\n                }\n            )\n    }\n\n\n    // display the tracks table\n    render() {\n        if(this.state.error){\n            return <div><b>{this.state.error.message}</b></div>;\n        }else if(this.state.isLoaded){\n            if(this.state.tracks_count!==0){\n                // track results not null\n                return (\n                    <div class=\"music-class\">\n                       <div class=\"right-area\"><Discogs/></div>\n                        <b><span id=\"status\">Current Playlist</span></b><br></br>\n                        <table>\n                            <thead>\n                                <th>ID</th>\n                                <th>Playlist ID</th>\n                                <th>Title</th>\n                                <th>URI</th>\n                                <th>Master ID</th>\n                                <th>Remove</th>\n                            </thead>\n                            <tbody>\n                            {\n                                this.state.tracks_data.map((track)=>{\n                                    return(<Track\n                                    id={track.id}\n                                    key={track.id}\n                                    playlistid={track.playlist_id}\n                                    title = {track.title}\n                                    uri={track.uri}\n                                    delete={this.deleteTrack.bind(this, track.id)}\n                                    masterid={track.master_id}\n                                    ></Track>)\n                                })\n                            }\n                            </tbody>\n                        </table>\n                    </div>\n                )\n            }else{\n                return(<div><b>track table is empty</b></div>)\n            }\n        }else{\n            return (<div><b>Waiting for server ...</b></div>)\n        }\n    }\n  }\n\nexport default Playlist;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Header from './Header.js'\nimport Footer from './Footer.js'\nimport Playlist from './Playlist.js'\nimport reportWebVitals from './reportWebVitals';\n\nclass Page extends React.Component{\n    render(){\n        return (\n            <div>\n            <Header companyName=\"blabla.com\"/>\n            <Playlist/>\n            <Footer year=\"2019 + 1\"/>\n            </div>\n        )\n    }\n}\nReactDOM.render(\n    <Page/>,\n    document.getElementById('root')\n  );\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__3L3ek\"};"],"sourceRoot":""}